#textdomain wesnoth-Galis_Contract
#define RECRUIT E N H
#ifdef EASY
    recruit={E}
#endif
#ifdef NORMAL
    recruit={N}
#endif
#ifdef HARD
    recruit={H}
#endif
#enddef

#define NON_STRETCHED_IMAGE X Y FILE
    background=misc/empty.png
    [image]
        x,y={X},{Y}
        file={FILE}
    [/image]
#enddef

#define MOVE_UNIT_FAKE X1 Y1 XM YM X2 Y2
    [store_unit]
        [filter]
            x,y={X1},{Y1}
        [/filter]
        variable=temp
        kill=yes
    [/store_unit]
    [move_unit_fake]
        x={X1},{XM},{X2}
        y={Y1},{YM},{Y2}
        type=$temp.type
        side=$temp.side
    [/move_unit_fake]
    [set_variable]
        name=temp.x
        value={X2}
    [/set_variable]
    [set_variable]
        name=temp.y
        value={Y2}
    [/set_variable]
    [unstore_unit]
        variable=temp
        find_vacant=yes
    [/unstore_unit]
    [clear_variable]
        name=temp
    [/clear_variable]
    [redraw]
    [/redraw]
#enddef

#define GALI_DEATHS
    [event]
        name=last breath
        [filter]
            id=Gali
        [/filter]
        [message]
            id=Gali
            message= _ "Gahhh..."
        [/message]
    [/event]
    [event]
        name=die
        [filter]
            id=Gali
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath
        [filter]
            id=Trondar
        [/filter]
        [message]
            id=Trondar
            message= _ "Urgh..."
        [/message]
    [/event]
    [event]
        name=die
        [filter]
            id=Trondar
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    [event]
        name=last breath
        [filter]
            id=Assai
        [/filter]
        [message]
            id=Assai
            message= _ "Yahh..."
        [/message]
    [/event]
#enddef

#define FORMAT VARIABLE TEMP_VARIABLE ELEMENT
    [set_variable]
        name={VARIABLE}_{TEMP_VARIABLE}_{ELEMENT}
        to_variable={VARIABLE}[${TEMP_VARIABLE}].{ELEMENT}
    [/set_variable]
#enddef

#define FOREACH_FORMAT VARIABLE TEMP_VARIABLE
    {FOREACH {VARIABLE} {TEMP_VARIABLE}}
    {FORMAT {VARIABLE} {TEMP_VARIABLE} x}
    {FORMAT {VARIABLE} {TEMP_VARIABLE} y}
#enddef

#define LODESTONE_LEAVING VARIABLE X Y
[store_unit]
    [filter]
        x,y={X},{Y}
    [/filter]
    variable={VARIABLE}
    kill=no
[/store_unit]
[scroll_to]
    x,y={X},{Y}
[/scroll_to]
#animate the lodestone
{FLASH_WHITE ()}
{FLASH_RED ({QUAKE (lightning.ogg)})}
{FLASH_GREEN ()}
[kill]
    x,y={X},{Y}
[/kill]
[redraw][/redraw]
[delay]
    time=100
[/delay]
[unstore_unit]
    variable={VARIABLE}
[/unstore_unit]
[redraw][/redraw]
{FLASH_BLUE ()}
[kill]
    x,y={X},{Y}
[/kill]
[redraw][/redraw]
[delay]
    time=150
[/delay]
[unstore_unit]
    variable={VARIABLE}
[/unstore_unit]
[redraw][/redraw]
{FLASH_WHITE ()}
[kill]
    x,y={X},{Y}
[/kill]
[redraw][/redraw]
[delay]
    time=200
[/delay]
#enddef

#define LODESTONE_APPEARING VARIABLE X Y
[set_variable]
    name={VARIABLE}.x
    value={X}
[/set_variable]
[set_variable]
    name={VARIABLE}.y
    value={Y}
[/set_variable]
[scroll_to]
    x,y={X},{Y}
[/scroll_to]
#animate the lodestone
{FLASH_WHITE ()}
{FLASH_RED ()}
[unstore_unit]
    variable={VARIABLE}
    find_vacant=yes
[/unstore_unit]
[store_unit]
    [filter]
        id=${VARIABLE}.id
    [/filter]
    variable={VARIABLE}
    kill=no
[/store_unit]
[redraw][/redraw]
{FLASH_GREEN ()}
[kill]
    x,y=${VARIABLE}.x,${VARIABLE}.y
[/kill]
[redraw][/redraw]
[delay]
    time=200
[/delay]
[unstore_unit]
    variable={VARIABLE}
    find_vacant=yes
[/unstore_unit]
[redraw][/redraw]
{FLASH_BLUE ({QUAKE (lightning.ogg)})}
[kill]
    x,y=${VARIABLE}.x,${VARIABLE}.y
[/kill]
[redraw][/redraw]
[delay]
    time=150
[/delay]
[unstore_unit]
    variable={VARIABLE}
    find_vacant=yes
[/unstore_unit]
[redraw][/redraw]
{FLASH_WHITE ()}
[clear_variable]
    name={VARIABLE}
[/clear_variable]
#enddef

#define ITEM_DWARVEN_TORCH X Y
[item]
    x,y={X},{Y}
    image=items/brazier-lit1.png
[/item]

[event]
    name=moveto
    [filter]
        x,y={X},{Y}
        side=1
        [not]
            ability=illumination
        [/not]
    [/filter]
    [object]
        #id=dwarven_torch
        name= _ "Dwarven Torch"
        image=items/brazier-lit1.png
        duration=scenario
        description= _ "This torch will prevent frostbite for the bearer and those around him, and make the bearer's melee attack fire."
        [filter]
            x,y={X},{Y}
        [/filter]
        [then]
            [remove_item]
                x,y={X},{Y}
            [/remove_item]
        [/then]
        [effect]
            apply_to=new_ability
            [abilities]
                {ABILITY_ILLUMINATES}
            [/abilities]
        [/effect]
        [effect]
            apply_to=attack
            range=melee
            set_type=fire
        [/effect]
        #[effect]
            #apply_to=halo
            #equals=halo/fire-aura.png
        #[/effect]
    [/object]
[/event]
#enddef

#define OPPOSITE_SIDE CENTER_X CENTER_Y X Y VAR
    {VARIABLE x_odd {X}}

    {VARIABLE_OP x_odd multiply 0.5}
    {VARIABLE_OP x_odd multiply 2}

    {VARIABLE c_x {CENTER_X}}
    {VARIABLE c_y {CENTER_Y}}
    {VARIABLE s_x {X}}
    {VARIABLE s_y {Y}}

    {VARIABLE result_x {CENTER_X}}
    {VARIABLE result_y {CENTER_Y}}

    {IF_VAR s_x greater_than $c_x (
        [then]
            {VARIABLE_OP result_x add -1}
        [/then]
    )}

    {IF_VAR s_x less_than $c_x (
        [then]
            {VARIABLE_OP result_x add 1}
        [/then]
    )}

    {IF_VAR s_x equals $c_x (
        [then]
            {IF_VAR s_y less_than $c_y (
                [then]
                    {VARIABLE_OP result_y add 1}
                [/then]
            )}

            {IF_VAR s_y greater_than $c_y (
                [then]
                    {VARIABLE_OP result_y add -1}
                [/then]
            )}
        [/then]
    )}

    {IF_VAR x_odd not_equals $s_x (
        [then]
            {IF_VAR s_y equals $c_y (
                [then]
                    {VARIABLE_OP result_y add 1}
                [/then]
            )}
        [/then]

        [else]
            {IF_VAR s_y equals $c_y (
                [then]
                    {VARIABLE_OP result_y add -1}
                [/then]
            )}
        [/else]
    )}
    {VARIABLE {VAR}.x $result_x}
    {VARIABLE {VAR}.y $result_y}

    {CLEAR_VARIABLE c_x}
    {CLEAR_VARIABLE c_y}
    {CLEAR_VARIABLE s_x}
    {CLEAR_VARIABLE s_y}
    {CLEAR_VARIABLE result_x}
    {CLEAR_VARIABLE result_y}
    {CLEAR_VARIABLE x_odd}
#enddef

#KNOCKBACK
[event]
       name=attacker hits
       first_time_only=no
   
       [filter_attack]
           special=knockback
       [/filter_attack]
   
       [filter_second]
           [not]
               [filter_location]
                   terrain=*^V*
               [/filter_location]
           [/not]
       [/filter_second]
   
       [if]
           [variable]
               name=second_unit.hitpoints
               greater_than=0
           [/variable]
   
           [then]
               [if]
                   [have_unit]
                       x,y=$x1,$y1
                       [filter_adjacent]
                           x,y=$x2,$y2
                           adjacent=n
                       [/filter_adjacent]
                   [/have_unit]
                   [then]
                       {VARIABLE knockback_direction n}
                   [/then]
                   [else]
                       [if]
                           [have_unit]
                               x,y=$x1,$y1
                               [filter_adjacent]
                                   x,y=$x2,$y2
                                   adjacent=ne
                               [/filter_adjacent]
                           [/have_unit]
                           [then]
                               {VARIABLE knockback_direction ne}
                           [/then]
                           [else]
                               [if]
                                   [have_unit]
                                       x,y=$x1,$y1
                                       [filter_adjacent]
                                           x,y=$x2,$y2
                                           adjacent=se
                                       [/filter_adjacent]
                                   [/have_unit]
                                   [then]
                                       {VARIABLE knockback_direction se}
                                   [/then]
                                   [else]
                                       [if]
                                           [have_unit]
                                               x,y=$x1,$y1
                                               [filter_adjacent]
                                                   x,y=$x2,$y2
                                                   adjacent=s
                                               [/filter_adjacent]
                                           [/have_unit]
                                           [then]
                                               {VARIABLE knockback_direction s}
                                           [/then]
                                           [else]
                                               [if]
                                                   [have_unit]
                                                       x,y=$x1,$y1
                                                       [filter_adjacent]
                                                           x,y=$x2,$y2
                                                           adjacent=sw
                                                       [/filter_adjacent]
                                                   [/have_unit]
                                                   [then]
                                                       {VARIABLE knockback_direction sw}
                                                   [/then]
                                                   [else]
                                                       [if]
                                                           [have_unit]
                                                               x,y=$x1,$y1
                                                               [filter_adjacent]
                                                                   x,y=$x2,$y2
                                                                   adjacent=nw
                                                               [/filter_adjacent]
                                                           [/have_unit]
                                                           [then]
                                                               {VARIABLE knockback_direction nw}
                                                           [/then]
                                                       [/if]
                                                   [/else]
                                               [/if]
                                           [/else]
                                       [/if]
                                   [/else]
                               [/if]
                           [/else]
                       [/if]
                   [/else]
               [/if]
   
               [store_locations]
                   [not]
                       [filter]
                       [/filter]
                   [/not]
   
                   [filter_adjacent_location]
                       x,y=$x2,$y2
                       adjacent=-$knockback_direction
                   [/filter_adjacent_location]
   
                   variable=knockback_target_hex
               [/store_locations]
   
               [if]
                   [variable]
                       name=knockback_target_hex.length
                       greater_than=0
                   [/variable]
   
                   [then]
                       [teleport]
                           [filter]
                               x,y=$x2,$y2
                           [/filter]
   
                           x,y=$knockback_target_hex.x,$knockback_target_hex.y
                           ignore_passability=no
                       [/teleport]
   
                       [if]
                           [have_unit]
                               x,y=$knockback_target_hex.x,$knockback_target_hex.y
                           [/have_unit]
   
                           [then]
                               [sound]
                                   name=fist.ogg
                               [/sound]
   
                               # the knockbacked unit doesn't seem to receive experience by default,
                               # so we need to add it manually
                               [store_unit]
                                   [filter]
                                       x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                   [/filter]
   
                                   kill=yes
                                   variable=knockbacked
                               [/store_unit]
   
                               {VARIABLE_OP knockbacked.experience add $unit.level}
   
                               [unstore_unit]
                                   variable=knockbacked
                                   text= _ "knockback"
                                   {COLOR_HARM}
                                   advance=true
                               [/unstore_unit]
   
                               {CLEAR_VARIABLE knockbacked}
                           [/then]
                       [/if]
                   [/then]
               [/if]
   
               {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
           [/then]
       [/if]
   [/event]